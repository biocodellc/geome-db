buildscript {
    repositories {
        mavenLocal()
        maven {
            url "https://repo.biocodellc.com/repository/maven-private/"
            credentials {
                username mavenUser
                password mavenPass
            }
        }
    }
    dependencies {
        classpath "org.biocode:gradle-fims:2.0.0"
    }
}

apply plugin: "application"
apply plugin: "org.biocode.fims-web"

if (!project.hasProperty('fimsCommonsVersion')) {
    ext.fimsCommonsVersion = "2.3.3"
}
if (!project.hasProperty('fimsPhotosVersion')) {
    ext.fimsPhotosVersion = "2.3.1"
}
if (!project.hasProperty('fimsEvolutionVersion')) {
    ext.fimsEvolutionVersion = "1.0.2"
}

fims {
    maven {
        username mavenUser
        password mavenPass
    }
}

repositories {
    mavenLocal()
    add(fims.mavenFims())
}

dependencies {
    compile group: 'org.imgscalr', name: 'imgscalr-lib', version: '4.2'
    compile group: 'com.opencsv', name: 'opencsv', version: '4.2'

    compile 'org.glassfish.jersey.media:jersey-media-multipart:2.27'
    compile group: 'org.glassfish.jersey.media', name: 'jersey-media-moxy', version: '2.27'
    compile group: 'org.glassfish.jersey.ext', name: 'jersey-spring4', version: '2.27'
    compile group: 'org.springframework', name: 'spring-context', version: '4.3.6.RELEASE'
    compile 'org.springframework:spring-jdbc:4.3.14.RELEASE'

    compile 'org.apache.commons:commons-lang3:3.8'
    compile group: 'commons-collections', name: 'commons-collections', version: '3.2.2'

    compile group: 'javax.xml.bind', name: 'jaxb-api', version: '2.2.11'
    compile group: 'com.sun.xml.bind', name: 'jaxb-impl', version: '2.2.11'
    compile group: 'com.sun.xml.bind', name: 'jaxb-core', version: '2.2.11'

    // https://mvnrepository.com/artifact/commons-net/commons-net
    compile group: 'commons-net', name: 'commons-net', version: '3.6'

    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.6'
    // https://mvnrepository.com/artifact/com.fasterxml.jackson.datatype/jackson-datatype-jsr310
    compile group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: '2.10.1'
    compile 'com.fasterxml.jackson.datatype:jackson-datatype-hibernate5:2.8.4'
    compile 'org.springframework.data:spring-data-jpa:1.10.1.RELEASE'
    compile group: 'org.hibernate.javax.persistence', name: 'hibernate-jpa-2.1-api', version: '1.0.0.Final'
    // https://mvnrepository.com/artifact/org.eclipse.persistence/org.eclipse.persistence.moxy
    compile group: 'org.eclipse.persistence', name: 'org.eclipse.persistence.moxy', version: '2.7.6'
    compile 'org.hibernate:hibernate-entitymanager:5.1.0.Final'

    compile 'javax.servlet:javax.servlet-api:3.1.0'
    compile 'org.slf4j:slf4j-log4j12:1.7.19'
    compile 'com.googlecode.json-simple:json-simple:1.1.1'

    compile 'commons-cli:commons-cli:1.2'

    compile group: 'org.apache.commons', name: 'commons-io', version: '1.3.2'
    compile composite.resolveDependency("org.biocode:biocode-fims-commons:${fimsCommonsVersion}", ":biocode-fims-commons")
    compile composite.resolveDependency("org.biocode:biocode-fims-evolution:${fimsEvolutionVersion}", ":biocode-fims-evolution")

    additionalSources(group: 'org.springframework.data', name: 'spring-data-commons', version: '1.10.1.RELEASE', classifier: 'sources') {
        transitive = false
    }
    additionalSources(group: 'org.biocode', name: 'biocode-fims-commons', version: "${fimsCommonsVersion}", classifier: 'sources') {
        transitive = false
    }

    testCompile "junit:junit-dep:4.10"
    testCompile 'org.mockito:mockito-all:1.9.5'
    integrationTestRuntime group: 'org.aspectj', name: 'aspectjweaver', version: '1.8.9'
    // need to use the following until https://github.com/gradle/gradle/issues/1553 is resolved. Then we can update DependencyResolver dependency substitution code
    integrationTestCompile composite.resolveDependency("org.biocode:biocode-fims-commons:${fimsCommonsVersion}", "biocode-fims-commons")
}

//=============================
//= application configuration
//=============================
mainClassName = ''

distributions {
    main {
        contents {
            into('lib') {
                from configurations.compile
            }
        }
    }
}

// TODO find a better way to do this, but we need to run the biocode-fims-commons
// registerOAuthClient task with the geome classpath
// ./gradlew registerOAuthClient -PappArgs="['-c', 'https://localhost:8080/']"
task registerOAuthClient(type: JavaExec) {
    classpath = configurations.compile + sourceSets.main.runtimeClasspath

    if (project.hasProperty("appArgs")) {
        args Eval.me(appArgs)
    }

    main = "biocode.fims.auth.oauth2.OAuthClientRegisterer"
}

task migrateHashes(type: JavaExec) {
    classpath = configurations.compile + sourceSets.main.runtimeClasspath

    main = "biocode.fims.run.HashMigrator"
}

task harvestSraBioSamples(type: JavaExec) {
    classpath = configurations.compile + sourceSets.main.runtimeClasspath

    main = "biocode.fims.run.SraAccessionHarvesterRunner"
}

task reportSraSubmissions(type: JavaExec) {
    classpath = configurations.compile + sourceSets.main.runtimeClasspath

    main = "biocode.fims.run.SraSubmissionReporterRunner"
}

task loadEvolutionData(type: JavaExec) {
    classpath = configurations.compile + sourceSets.main.runtimeClasspath

    if (project.hasProperty("appArgs")) {
        args Eval.me(appArgs)
    }

    main = "biocode.fims.run.EvolutionDataLoader"
}

startScripts {
    classpath = files(jar.archivePath, configurations.compile, configurations.runtime)
}

deployFimsLocal {
    deployDir = localWarDirectory
}

//=============================
//= war configuration
//=============================

war {
    from("${projectDir}/docs/helpDocumentation.pdf", {
        into 'docs'
    })
}

//= Rest api docs configuration
//=============================

// TODO move this from the web plugin to the fims plugin
generateRestApiDocs {
    additionalSourcesInclude 'org/springframework/data/domain/*.java', 'biocode/fims/**/*.java'
    additionalSourcesExclude 'org/springframework', 'biocode/fims/rest/FimsDefaultServlet.java', 'biocode/fims/validation/rules/ControlledVocabularyRule.java'

    swagger {
        apiInfo = "${projectDir}/swagger/api-info.json"
        apiVersions = ["v1"]
        apiBasePath = "/"
        apiSchemes = ["https", "http"]
    }
}

generateRestApiDocs.dependsOn(clean)
