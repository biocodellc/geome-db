buildscript {
    repositories {
        mavenLocal()
        maven {
            url "https://repo.biocodellc.com/repository/maven-private/"
            credentials {
                username mavenUser
                password mavenPass
            }
        }
    }
    dependencies {
        classpath "org.biocode:gradle-fims:1.3.4"
    }
}

apply plugin: "application"
apply plugin: "org.biocode.fims-web"

import org.biocode.gradle.web.tasks.RestartRemoteJettyTask
import org.biocode.gradle.web.tasks.HotDeployRemoteJettyTask

if (!project.hasProperty('fimsCommonsVersion')) {
    ext.fimsCommonsVersion = "1.1.1"
}
if (!project.hasProperty('fimsSequencesVersion')) {
    ext.fimsSequencesVersion = "1.0.0"
}
if (!project.hasProperty('fimsPhotosVersion')) {
    ext.fimsPhotosVersion = "1.0.0"
}

fims {
    maven {
        username mavenUser
        password mavenPass
    }
}

repositories {
    mavenLocal()
    add(fims.mavenFims())
}

// need to evaluate childProjects first so we can add the childProject server dependencies to the server configuration
evaluationDependsOnChildren()

dependencies {
    server 'org.glassfish.jersey.media:jersey-media-multipart:2.27'

    server group: 'org.glassfish.jersey.ext', name: 'jersey-spring4', version: '2.27'

    server 'com.fasterxml.jackson.datatype:jackson-datatype-hibernate5:2.8.4'
    server 'org.springframework.data:spring-data-jpa:1.10.1.RELEASE'
    server group: 'org.hibernate.javax.persistence', name: 'hibernate-jpa-2.1-api', version: '1.0.0.Final'

    server 'javax.servlet:javax.servlet-api:3.1.0'
    server 'org.slf4j:slf4j-log4j12:1.7.19'
    server 'com.googlecode.json-simple:json-simple:1.1.1'

    server 'commons-cli:commons-cli:1.2'

    server group: 'org.apache.commons', name: 'commons-io', version: '1.3.2'
    compile composite.resolveDependency("org.biocode:biocode-fims-commons:${fimsCommonsVersion}", ":biocode-fims-commons")
    compile composite.resolveDependency("org.biocode:biocode-fims-sequences:${fimsSequencesVersion}", ":biocode-fims-sequences")
    compile composite.resolveDependency("org.biocode:biocode-fims-photos:${fimsPhotosVersion}", ":biocode-fims-photos")

    additionalSources(group: 'org.springframework.data', name: 'spring-data-commons', version: '1.10.1.RELEASE', classifier: 'sources') {
        transitive = false
    }
    additionalSources(group: 'org.biocode', name: 'biocode-fims-commons', version: "${fimsCommonsVersion}", classifier: 'sources') {
        transitive = false
    }
    additionalSources(group: 'org.biocode', name: 'biocode-fims-sequences', version: "${fimsSequencesVersion}", classifier: 'sources') {
        transitive = false
    }
    additionalSources(group: 'org.biocode', name: 'biocode-fims-photos', version: "${fimsPhotosVersion}", classifier: 'sources') {
        transitive = false
    }

    testCompile "junit:junit-dep:4.10"
    integrationTestRuntime group: 'org.aspectj', name: 'aspectjweaver', version: '1.8.9'
    // need to use the following until https://github.com/gradle/gradle/issues/1553 is resolved. Then we can update DependencyResolver dependency substitution code
    integrationTestCompile composite.resolveDependency("org.biocode:biocode-fims-commons:${fimsCommonsVersion}", "biocode-fims-commons")

    subprojects.each {
        project.configurations.server.dependencies.addAll(it.configurations.server.dependencies)
        project.configurations.serverRuntime.dependencies.addAll(it.configurations.serverRuntime.dependencies)
    }
}

//=============================
//= ssh configuration
//=============================

// jetty ssh plugin
remotes {
    biscicol {
        host = 'biscicol3.acis.ufl.org'
        user = biscicolUser
        password = biscicolPassword
    }
}

//=============================
//= application configuration
//=============================
mainClassName = ''

distributions {
    main {
        contents {
            into('lib') {
                from configurations.server
            }
        }
    }
}

// TODO find a better way to do this, but we need to run the biocode-fims-commons
// registerOAuthClient task with the geome classpath
// ./gradlew registerOAuthClient -PappArgs="['-c', 'https://localhost:8080/']"
task registerOAuthClient(type: JavaExec) {
    classpath = configurations.server + configurations.compile + sourceSets.main.runtimeClasspath

    if (project.hasProperty("appArgs")) {
        args Eval.me(appArgs)
    }

    main = "biocode.fims.auth.oauth2.OAuthClientRegisterer"
}

startScripts {
    classpath = files(jar.archivePath, configurations.server, configurations.runtime)
}

//=============================
//= deployment configuration
//=============================

updateDependencies {
    remote = remotes.biscicol
    location = remoteLibsDirectory
}

deployFims {
    remote = remotes.biscicol
    remoteLibsDir = remoteLibsDirectory
    remoteWarDir = remoteWarDirectory
}

deployFimsLocal {
    deployDir = localWarDirectory
}

task hotDeployFims(type: HotDeployRemoteJettyTask, dependsOn: "deployFims") {
    group = 'Fims'
    remoteWarDir = remoteWarDirectory
    remote = remotes.biscicol
}

task restartFims(type: RestartRemoteJettyTask) {
    group = 'Fims'
    jettyPath = biscicolJettyPath
    remote = remotes.biscicol
}

task restartFimsDev(type: RestartRemoteJettyTask) {
    group = 'Fims'
    jettyPath = biscicolJettyDevPath
    remote = remotes.biscicol
}

//=============================
//= war configuration
//=============================

war {
    from ("${projectDir}/docs/helpDocumentation.pdf", {
        into 'docs'
    })
}

fatWar {
    from ("${projectDir}/docs/helpDocumentation.pdf", {
        into 'docs'
    })
}


//= Rest api docs configuration
//=============================

// TODO move this from the web plugin to the fims plugin
generateRestApiDocs {
    additionalSourcesInclude 'org/springframework/data/domain/*.java', 'biocode/fims/**/*.java'
    additionalSourcesExclude 'org/springframework', 'biocode/fims/rest/FimsDefaultServlet.java', 'biocode/fims/validation/rules/ControlledVocabularyRule.java'

    swagger {
        apiInfo = "${projectDir}/swagger/api-info.json"
        apiVersions = ["v1"]
        apiBasePath = "/"
        apiSchemes = ["https", "http"]
    }
}

generateRestApiDocs.dependsOn(clean)
